<?php

namespace App\Http\Controllers\ApiCall\License;

use App\Http\Controllers\Controller;
use App\Models\Setting;
use App\Models\ApiCall as MyModel;
use App\Models\Products;
use App\Models\Clients;
use Illuminate\Http\Request;
use Spatie\Permission\Models\Permission;
use App\Models\User_Permission;
use App\Models\License;
use App\Models\LicensesUse;
use App\Notifications\ActivationModelNotification;
use DB;
use App\Models\Versions;
use App\Models\ClientsProducts;
use Spatie\Crypto\Rsa\KeyPair;
use Spatie\Crypto\Rsa\PublicKey;

class ActivateLicenseContoller  extends Controller
{

    protected $model;

    public function __construct(MyModel $model)
    {
        $this->model = $model;
    }

    public function ActivateLicense(Request $request)
    {
        $client_id = $request->header('client-id');
        $license_code = $request->header('license-code');
        $api_key = $request->header('api-key');
        $domain = \Request::root();
        $ip = \Request::ip();
        $product_id = null;
        $status = true;
        $errors = array();
        $cl_id = null;
        $client = Clients::where('client_id', $client_id)->first();
        $cl_id = $client->id;

        $license = License::where('license_code', $license_code)->where('client_id', $cl_id)->first();
        if (!$license) {
            $status = false;
            $errors[] = trans('lang.license_code_not_found');
        } else {
            if ($license->block == 1) {
                $status = false;
                $errors[] = trans('lang.license_is_blocked');
            }

            $product_id = $license->product_id;
            $product = Products::find($product_id);
            if ($product) {
                if ($license->date and $license->date < date('Y-m-d') and $product->download_update == 1) {
                    $status = false;
                    $errors[] = trans('lang.license_is_expired');
                }
            } else {
                $status = false;
                $errors[] = trans('lang.product_not_found') . ' ID:' . $product_id;
                $product_id = null;
            }
        }

        if ($license) {
            if ($license->type == 1) {
                $check_count_used_ip = LicensesUse::where('license_id', $license->id)->where('ip', '!=', $ip)->where('is_activate', 1)->count();
                if ($check_count_used_ip >= $license->use_limit) {
                    $status = false;
                    $errors[] = trans('lang.exceeded_usage_limit');
                }
            }
        }


        $licenses_ip = LicensesUse::where('license_id', $license->id)->where('ip', $ip)->first();
        if (!$licenses_ip) {
            $status = false;
            $errors[] = trans('lang.ip_not_signed_in');
        } else {
            if ($licenses_ip->is_used == 0 and $license->type == 1) {
                $status = false;
                $errors[] = trans('lang.ip_not_signed_in');
            }

            if ($licenses_ip->is_activate == License::ACTIVATE) {
                $status = false;
                $errors[] = trans('lang.license_already_activated');
            }
        }


        if ($status == true) {
            $status_data  = 1;
        } else {
            $status_data = 0;
        }
        $errors = implode(",", $errors);

        if ($status == false) {
            $apiData = MyModel::create(['product_id' => $product_id, 'client_id' => $cl_id, 'status' => $status_data, 'license_code' => $license_code, 'api_key' => $api_key, 'ip' => $ip, 'domain' => $domain, 'validation_error' => $errors, 'function' => MyModel::ActivateLicense]);
            return response()->json(['status' => false, 'data' => '', 'msg' => trans('lang.error'), 'errors' => $errors], 422);
        }

        DB::beginTransaction();
        try {

            $licenses_ip->is_activate = 1;
            $licenses_ip->save();

            [$privateKey, $publicKey] = (new KeyPair())->generate();

            $license->update(['usage' => License::ACTIVATE, 'public_key' => $publicKey]);
            $apiData = MyModel::create(['product_id' => $product_id, 'client_id' => $cl_id, 'status' => $status_data, 'license_code' => $license_code, 'api_key' => $api_key, 'ip' => $ip, 'domain' => $domain, 'validation_error' => $errors, 'function' => MyModel::ActivateLicense]);
            \Notification::route('mail', $client->email)->notify(new ActivationModelNotification([
                'title' => __('mail.activate_license_title'),
                'content' => __('mail.activate_license_content', ['license_name' => $license->name]),
                'license_code' =>  __('mail.license_code') . ': ' . $license->license_code,
                'product' =>  __('mail.product') . ': ' . $license->product->name,
                'ip' => 'IP: ' . $ip,
                'flag' => 1
            ]));

            $publicKey = PublicKey::fromString($license->public_key);

            $data = $publicKey->encrypt(json_encode($license->toArray()));

            DB::commit();
            return response()->json(['status' => true, 'data' => $data , 'private_key' => $privateKey, 'msg' => trans('lang.success'), 'errors' => ''], 200);
        } catch (\Exception $e) {
            DB::rollback();
            $apiData = MyModel::create(['product_id' => $product_id, 'client_id' => $cl_id, 'status' => 0, 'license_code' => $license_code, 'api_key' => $api_key, 'ip' => $ip, 'domain' => $domain, 'validation_error' => $errors, 'errors' => $e, 'function' => MyModel::ActivateLicense]);
            return response()->json(['status' => false, 'data' => '', 'msg' => trans('lang.error'), 'errors' => $errors . ',' . $e], 422);
        }
    }


    public function ActivateOfflineLicense(Request $request)
    {
        $client_id = $request->header('client-id');
        $api_key = $request->header('api-key');
        $uuid = $request->get('uuid');
        $macaddress = $request->get('macaddress');
        $domain = \Request::root();
        $ip = \Request::ip();
        $product_id = null;
        $status = true;
        $errors = array();
        $cl_id = null;
        $client = Clients::where('client_id', $client_id)->first();
        $cl_id = $client->id;

        if (!$macaddress) {
            $status = false;
            $errors[] = trans('lang.macaddress_required');
        }

        if (!$uuid) {
            $status = false;
            $errors[] = trans('lang.uuid_required');
        }

        if ($status == true) {
            $license = License::where('uuid', $uuid)->where('client_id', $cl_id)->first();
            if (!$license) {
                $status = false;
                $errors[] = trans('lang.license_code_not_found');
            } else {

                if ($macaddress != $license->machine_id) {
                    $status = false;
                    $errors[] = trans('lang.macaddrees_wrong');
                }

                if ($ip != $license->ip) {
                    $status = false;
                    $errors[] = trans('lang.ip_wrong');
                }

                if ($license->block == 1) {
                    $status = false;
                    $errors[] = trans('lang.license_is_blocked');
                }

                $product_id = $license->product_id;
                $product = Products::find($product_id);
                if ($product) {
                    if ($license->date and $license->date < date('Y-m-d') and $product->download_update == 1) {
                        $status = false;
                        $errors[] = trans('lang.license_is_expired');
                    }
                } else {
                    $status = false;
                    $errors[] = trans('lang.product_not_found') . ' ID:' . $product_id;
                    $product_id = null;
                }
            }


            $licenses_ip = LicensesUse::where('license_id', $license->id)->where('ip', $ip)->first();
            if (!$licenses_ip) {
                $status = false;
                $errors[] = trans('lang.ip_not_signed_in');
            } else {
                if ($licenses_ip->is_activate == License::ACTIVATE) {
                    $status = false;
                    $errors[] = trans('lang.license_already_activated');
                }
            }
        }



        if ($status == true) {
            $status_data  = 1;
        } else {
            $status_data = 0;
        }
        $errors = implode(",", $errors);

        if ($status == false) {
            $apiData = MyModel::create(['product_id' => $product_id, 'client_id' => $cl_id, 'status' => $status_data, 'license_code' => $license_code, 'api_key' => $api_key, 'ip' => $ip, 'domain' => $domain, 'validation_error' => $errors, 'function' => MyModel::ActivateLicense]);
            return response()->json(['status' => false, 'data' => '', 'msg' => trans('lang.error'), 'errors' => $errors], 422);
        }

        DB::beginTransaction();
        try {

            $licenses_ip->is_activate = 1;
            $licenses_ip->save();

            $license->update(['usage' => License::ACTIVATE]);
            $apiData = MyModel::create(['product_id' => $product_id, 'client_id' => $cl_id, 'status' => $status_data, 'license_code' => $license_code, 'api_key' => $api_key, 'ip' => $ip, 'domain' => $domain, 'validation_error' => $errors, 'function' => MyModel::ActivateLicense]);
            \Notification::route('mail', $client->email)->notify(new ActivationModelNotification([
                'title' => __('mail.activate_license_title'),
                'content' => __('mail.activate_license_content', ['license_name' => $license->name]),
                'license_code' =>  __('mail.license_code') . ': ' . $license->license_code,
                'product' =>  __('mail.product') . ': ' . $license->product->name,
                'ip' => 'IP: ' . $ip,
                'flag' => 1
            ]));

            DB::commit();
            return response()->json(['status' => true, 'data' => $license, 'msg' => trans('lang.success'), 'errors' => ''], 200);
        } catch (\Exception $e) {
            DB::rollback();
            $apiData = MyModel::create(['product_id' => $product_id, 'client_id' => $cl_id, 'status' => 0, 'license_code' => $license_code, 'api_key' => $api_key, 'ip' => $ip, 'domain' => $domain, 'validation_error' => $errors, 'errors' => $e, 'function' => MyModel::ActivateLicense]);
            return response()->json(['status' => false, 'data' => '', 'msg' => trans('lang.error'), 'errors' => $errors . ',' . $e], 422);
        }
    }
}
